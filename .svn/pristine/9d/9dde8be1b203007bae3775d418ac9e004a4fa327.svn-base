/*
 * To change super license header, choose License Headers in Project Properties.
 * To change super template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mx.com.evoti.dao;

import java.io.Serializable;
import java.util.List;
import mx.com.evoti.dao.exception.IntegracionException;
import mx.com.evoti.dto.finiquito.UsuarioBajaDto;
import mx.com.evoti.hibernate.config.HibernateUtil;
import mx.com.evoti.hibernate.pojos.Usuarios;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.transform.Transformers;
import org.slf4j.LoggerFactory;

/**
 *
 * @author Venette
 */
public class UsuariosDao extends ManagerDB implements Serializable{
 
    private static final long serialVersionUID = 8958190915055950161L;
     private static final org.slf4j.Logger LOGGER = LoggerFactory.getLogger(UsuariosDao.class);

     /**
      * Actualiza un pojo del tipo Usuarios
      * @param usuario
      * @throws IntegracionException 
      */
    public void updtUsuario(Usuarios usuario) throws IntegracionException {
        
        super.updatePojo(usuario);

    }

    
    public Usuarios obtenerUsuario(Integer idUsuario) throws IntegracionException{
         try{
                super.beginTransaction();
                
                
            Usuarios usuarios = (Usuarios)session.get(Usuarios.class, idUsuario);
            
            
               super.endTransaction();
               return usuarios;
            }catch(HibernateException he){
                LOGGER.error(he.getMessage());
              throw new IntegracionException(he);
          }
    }

    
     /**
      * Actualiza el campo usuprimeravez de un usuario
      * @param idUsuario
      * @param primeraVez
      * @throws IntegracionException 
      */
     public void updtUsrPrimeraVez(Integer idUsuario, int primeraVez) throws IntegracionException{
             String hql = String.format("update Usuarios set usuPrimeravez = %1$s "
                     + "where usuId = %2$s ",primeraVez, idUsuario);
        
        super.executeUpdate(hql);
     }
    
     /**
      * Metodo que se utiliza en todos los filtros en que se manda
      * clve de empleado y empresa
      * @param claveEmpleado
      * @param idEmpresa
      * @return
      * @throws IntegracionException 
      */
     public List<Usuarios> getUsuarioXCveYEmpresa(Integer claveEmpleado, Integer idEmpresa) throws IntegracionException{
          super.beginTransaction();  
         Query sqlQuery = session.createQuery(
                String.format("from Usuarios usu "
                        + "where usu.usuClaveEmpleado = %1$s "
                        + "and usu.empresas.empId = %2$s ", claveEmpleado,idEmpresa));

        List<Usuarios> usuarios = sqlQuery.list();
           super.endTransaction();
        return usuarios;
     }
     
     /**
      * Obtiene un usuario buscando por su id, la diferencia con el metodo obtenerUsuario
      * es que este último no trae la entidad Empresa en el resultado, y el actual sí
      * @param id
      * @return
      * @throws IntegracionException 
      */
      public Usuarios getUsrById(Integer id) throws IntegracionException{
          super.beginTransaction();  
         Query qry = session.createQuery(
                String.format("from Usuarios usu "
                        + "where usu.usuId = %1$s ", id));

        Usuarios usuarios = (Usuarios)qry.uniqueResult();
        
        super.endTransaction();
        
        return usuarios;
     }
      
      
      /**
       * Obtiene todos los usuarios dados de baja
       * @return
       * @throws IntegracionException 
       */
      public List<UsuarioBajaDto> getUsrsBaja(Integer estatus) throws IntegracionException{
          super.beginTransaction(); 
          
         Query qry = session.createQuery(
                String.format("select usu.usuId as usuId, usu.usuClaveEmpleado as usuClaveEmpleado,"
                        + "usu.empresas.empAbreviacion as empAbreviacion, "
                        + "concat(usu.usuNombre, ' ', usu.usuPaterno,' ', usu.usuMaterno) as usuNombreCompleto, "
                        + "usu.usuFechaBaja as usuFechaBaja, bae.baeDeudaCreditos as baeDeudaCreditos,"
                        + "bae.baeAhorros as baeAhorros "
                        + "from Usuarios usu, BajaEmpleados bae "
                        + "where bae.baeEstatus = %1$s "
                        + "and usu.usuFechaBaja is not null "
                        + "and usu.usuId = bae.baeIdEmpleado "
                        + "order by usu.usuFechaBaja desc ", estatus));

        List<UsuarioBajaDto> usuarios = qry.setResultTransformer(Transformers.aliasToBean(UsuarioBajaDto.class)).list();
          System.out.println(usuarios.size());
        super.endTransaction();
       
        return usuarios;
     }
      
    
    public static void main(String args[]){
            HibernateUtil.buildSessionFactory2();
            
            UsuariosDao dao = new UsuariosDao();
        try {
            List<UsuarioBajaDto> usuario = dao.getUsrsBaja(3);
            System.out.println(usuario.size());
            usuario.stream().forEach((usu) -> {
                System.out.println(usu.getUsuFechaBaja()+","+usu.getUsuClaveEmpleado()+","+usu.getEmpAbreviacion());
                });  
        } catch (IntegracionException ex) {
           ex.printStackTrace();
        }
    }
    
}
